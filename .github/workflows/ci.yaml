name: CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

env:
  CARGO_TERM_COLOR: always

jobs:
  tests:
    name: Run tests
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Cargo cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Setup tools
        run: rustup default stable

      - name: Run tests
        run: cargo test --verbose

  next-version:
    name: Detect next version
    if: github.event.ref == 'refs/heads/main'
    runs-on: ubuntu-22.04

    outputs:
      tag: ${{ steps.next-version.outputs.output }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: "0"

      - name: Find next version
        id: next-version
        uses: ancosma/nexver@HEAD

  patch-version:
    name: Patch version
    if: github.event.ref == 'refs/heads/main'
    needs: [next-version, tests]
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Pip cache
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('.github/workflows/ci.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Setup tools
        run: pip install toml-cli

      - name: Patch version
        run: |
          tag='${{ needs.next-version.outputs.tag }}'
          toml set --toml-path Cargo.toml package.version "${tag#v}"

          git pull
          git add Cargo.toml && git commit -m "ci: Version patch" && git push origin main || true

  build-and-publish:
    name: Build and publish
    if: github.event.ref == 'refs/heads/main'
    needs: [next-version, patch-version]
    runs-on: ubuntu-22.04

    strategy:
      fail-fast: false
      matrix:
        tag: ["${{ needs.next-version.outputs.tag }}"]
        target:
          [
            x86_64-unknown-linux-gnu,
            aarch64-unknown-linux-gnu,
            x86_64-pc-windows-gnu,
          ]

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Cargo cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Setup tools
        id: setup
        run: |
          ./scripts/ghr-install
          ./scrips/cross-install

          echo "cross_version=$(cross-util --version | cut -d' ' -f2 -)" >> $GITHUB_OUTPUT

      - name: Cross cache
        uses: actions/cache@v3
        id: cross-cache
        with:
          path: ~/.cross/images/${{ matrix.target }}-${{ steps.setup.outputs.cross_version }}
          key: ${{ runner.os }}-cross-${{ steps.setup.outputs.cross_version }}

      - name: Restore ${{ matrix.target }} cross image
        run: ./scripts/cross-import-image ${{ matrix.target }}

      - name: Build ${{ matrix.tag }} (${{ matrix.target }}) & upload artifact
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          ./scripts/build-release-artifact "${{ matrix.target }}"

          artifact="$(ls target/${{ matrix.target }}/*{zip,tar.gz} 2>/dev/null | tr -d '\n')"
          ghr "${{ matrix.tag }}" "${artifact}"

          checksum="$(shasum -a 256 ${artifact} | cut -d' ' -f1 - | tr -d '\n')"
          echo "checksum=${checksum}" >> $GITHUB_OUTPUT
          echo "archive=$(basename ${artifact})" >> $GITHUB_OUTPUT

      - name: Export ${{ matrix.target }} cross image
        run: ./scripts/cross-export-image "${{ matrix.target }}"
